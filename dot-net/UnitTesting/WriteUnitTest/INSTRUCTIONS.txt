Objective:
	Write a unit test for the UpdateLessonGrade method of the LessonService. Bear
	in mind this is a simplified program that does not persist data to a common 
	data store. The LessonRepository and ModuleRepository return data from a 
	hardcoded list.
	
	Feel free to refactor the application as you feel necessary. The 
	WriteUnitTest console application is an example application which lives 
	in isolation, i.e. other applications do not reference it or its
	functions.

Background Information:
	Definitions:
		Unit Test (https://en.wikipedia.org/wiki/Unit_testing) - In computer 
		programming, unit testing is a software testing method by which individual 
		units of source code, sets of one or more computer program modules together 
		with associated control data, usage procedures, and operating procedures, 
		are tested to determine whether they are fit for use.[1] Intuitively, one 
		can view a unit as the smallest testable part of an application. In 
		procedural programming, a unit could be an entire module, but it is more 
		commonly an individual function or procedure. In object-oriented programming, 
		a unit is often an entire interface, such as a class, but could be an 
		individual method.[2] Unit tests are short code fragments[3] created by 
		programmers or occasionally by white box testers during the development 
		process. It forms the basis for component testing.[4]

		Ideally, each test case is independent from the others. Substitutes 
		such as method stubs, mock objects,[5] fakes, and test harnesses can 
		be used to assist testing a module in isolation. Unit tests are typically 
		written and run by software developers to ensure that code meets its design 
		and behaves as intended.
		
		Module - a collection of lessons 

NOTES:
	* Installed xUnit. It's more robust and modern.
		* Can write/run parameterized tests. Numerous test methods, each for different parameters, are not needed and consequently simplifies test writing.
	* Removed Lesson list from Module. Added ModuleId to Lesson. This was done to 
	  centralize data for this simple scenario.
	* For a real-world application, the service, repositories and entities need to be 
	  fleshed out using interfaces and dependency injection. Each area of concern placed
	  in their separate components.
	* Interfaces would allow for use of mock repositories and db contexts within unit tests.